generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 学校模型
model school {
  id             String    @id @unique @default(uuid())
  // 学校编号
  schoolCode     String    @unique @map("school_code")
  // 学校名
  schoolName     String    @unique @map("school_name")
  // 学校等级  小学 初中  高中 本一 本二 本三 211 985  
  schoolCategory String    @map("school_category")
  // 学校地址
  schoolAdress   String    @map("school_adress")
  departList     depart[]
  majorList      major[]
  classesList    classes[]
  studentList    student[]
  teacherList    teacher[]
}

// 院系模型
model depart {
  id          String    @id @unique @default(uuid())
  // 院系编号
  departCode  String    @unique @map("depart_code")
  // 院系名
  departName  String    @unique @map("depart_name")
  // 学校
  schoolModel school    @relation(fields: [schoolId], references: [id])
  schoolId    String    @map("school_id")
  majorList   major[]
  classesList classes[]
  studentList student[]
  teacherList teacher[]
}

// 专业模型
model major {
  id           String   @id @unique @default(uuid())
  // 院系编号
  majorCode    String   @unique @map("major_code")
  // 专业名
  departName   String   @unique @map("major_name")
  // 院系
  departModel  depart?  @relation(fields: [departId], references: [id])
  departId     String?  @map("depart_id")
  // 老师专业
  teacherModel teacher? @relation(fields: [teacherId], references: [id])
  teacherId    String?  @map("teacher_id")

  school      school?   @relation(fields: [schoolId], references: [id])
  schoolId    String?
  classesList classes[]
  studentList student[]
  courseList  course[]
  clockList   clock[]
  gradeList   grade[]
}

// 班级模型
model classes {
  id          String    @id @unique @default(uuid())
  // 班级编号
  classCode   String    @unique @map("class_code")
  // 班级姓名
  className   String    @unique @map("class_name")
  // 学校
  schoolModel school?   @relation(fields: [schoolId], references: [id])
  schoolId    String?   @map("school_id")
  // 院系
  departModel depart?   @relation(fields: [departId], references: [id])
  departId    String?   @map("depart_id")
  // 专业
  majorModel  major?    @relation(fields: [majorId], references: [id])
  majorId     String?   @map("major_id")
  studentList student[]
}

// 学生
model student {
  // 用户ID 不能重复 默认为UUID
  id                String   @id @unique @default(uuid())
  // 身份证
  studentCard       String   @unique @map("student_card")
  // 学号 @map表示为字段定义别名
  studentCode       String   @unique @map("student_code")
  // 姓名 
  studentName       String   @map("student_name")
  // 密码
  studentPassword   String   @default("123456") @map("student_password")
  // 性别
  studentSex        Boolean  @default(true) @map("student_sex")
  // 生日
  studentBirthday   DateTime @map("student_birthday")
  // 手机号
  studentPhone      Int      @map("student_phone")
  // 地址
  studentAddress    String   @default("") @map("student_address")
  // 入学时间
  studentEntrance   DateTime @map("student_entrance")
  // 毕业时间
  studentGraduation DateTime @map("student_graduation")

  // 学校
  schoolModel   school?         @relation(fields: [schoolId], references: [id])
  schoolId      String?         @map("school_id")
  // 院系
  departModel   depart?         @relation(fields: [departId], references: [id])
  departId      String?         @map("depart_id")
  // 专业
  majorModel    major?          @relation(fields: [majorId], references: [id])
  majorId       String?         @map("major_id")
  // 班级
  classesModel  classes?        @relation(fields: [classesId], references: [id])
  classesId     String?         @map("classes_id")
  studentCourse studentCourse[]
  clockList     clock[]
  gradeList     grade[]
  // @@map("student") 重命名表名
  graduation    graduation[]
}

// 老师
model teacher {
  // 用户ID 不能重复 默认为UUID
  id                String   @id @unique @default(uuid())
  // 身份证
  teacherCard       String   @unique @map("teacher_card")
  // 用户名 
  teacherName       String   @unique @map("teacher_name")
  // 密码
  teacherPassword   String   @default("123456") @map("teacher_password")
  // 性别
  teacherSex        Boolean  @default(true) @map("teacher_sex")
  // 生日
  teacherBirthday   DateTime @map("teacher_birthday")
  // 手机号
  teacherPhone      Int      @map("teacher_phone")
  // 地址
  teacherAddress    String   @default("") @map("teacher_address")
  // 入学时间
  teacherEntrance   DateTime @map("teacher_entrance")
  // 毕业时间
  teacherGraduation DateTime @map("teacher_graduation")
  // 学历
  teacherEducation  String   @map("teacher_education")
  // 职称 助教、讲师、副教授、教授
  teacherProfessor  String   @map("teacher_professor")
  //学校
  schoolModel       school?  @relation(fields: [schoolId], references: [id])
  schoolId          String?
  // 院系
  departModel       depart?  @relation(fields: [departId], references: [id])
  departId          String?  @map("depart_id")

  major      major[]
  course     course[]
  graduation graduation[]
}

// 课程类型模型 
model courseType {
  id             String @id @unique @default(uuid())
  // 课程编号 
  courseTypeCode String @unique @map("course_type_code")
  // 课程名 
  courseTypeName String @unique @map("course_type_name")

  course course[]
}

// 班级课程模型
model course {
  id              String          @id @unique @default(uuid())
  // 年份
  courseYear      Int             @map("classes_course_year")
  // 学期 第1学期 第二学期
  courseSemester  String          @map("classes_course_semester")
  // 是否必修
  courseRequired  Boolean         @default(true) @map("classes_course_required")
  // 是否重修
  courseRepair    Boolean         @default(false) @map("student_course_Repair")
  // 学分
  courseCredit    String          @default("5") @map("course_credit")
  // 学时
  courseHours     String          @default("20") @map("course_hours")
  // 课程类型
  courseTypeModel courseType      @relation(fields: [courseTypeId], references: [id])
  courseTypeId    String          @map("course_type_id")
  // 班级
  classesModel    major?          @relation(fields: [classesId], references: [id])
  classesId       String?         @map("classes_id")
  // 老师
  teacherModel    teacher?        @relation(fields: [teacherId], references: [id])
  teacherId       String?         @map("teacher_id")
  studentCourse   studentCourse[]
}

// 学生课程模型
model studentCourse {
  id           String   @id @unique @default(uuid())
  // 课程班级
  courseModel  course?  @relation(fields: [courseId], references: [id])
  courseId     String?  @map("course_id")
  // 学生
  studentModel student? @relation(fields: [studentId], references: [id])
  studentId    String?  @map("student_id")
}

// 学生打卡签到模型
model clock {
  id           String   @id @unique @default(uuid())
  // 打卡时间
  clockTime    DateTime @map("clock_time")
  // 班级课程
  courseModel  major?   @relation(fields: [courseId], references: [id])
  courseId     String?  @map("course_id")
  // 学生
  studentModel student? @relation(fields: [studentId], references: [id])
  studentId    String?  @map("student_id")
}

// 课程成绩模型
model grade {
  id           String   @id @unique @default(uuid())
  // 平时分数
  gradeNormal  Int      @default(60)
  // 期末分数
  gradeExam    Int      @default(60)
  // 最终成绩分数=平时分数*0.4 +期末分数*0.6  90优秀 80良好 60及格 60以下不及格
  gradeScore   Int      @default(60)
  // 成绩备注（优秀和不及格需要备注）
  gradeRemark  String   @default("及格")
  // 班级课程
  courseModel  major?   @relation(fields: [courseId], references: [id])
  courseId     String?  @map("course_id")
  // 学生
  studentModel student? @relation(fields: [studentId], references: [id])
  studentId    String?  @map("student_id")
}

// 毕业情况
model graduation {
  id                    String  @id @unique @default(uuid())
  // 毕业时间
  graduationYear        String? @map("graduation_year")
  // 毕业分数 
  graduationScore       String? @map("graduation_score")
  // 毕业成绩 优秀毕业 
  graduationResult      String? @map("graduation_result")
  // 毕业证书
  graduationCertificate String? @map("graduation_certificate")
  // 毕业论文
  graduationPaper       String? @map("graduation_paper")
  // 毕业项目
  graduationProject     String? @map("graduation_project")

  // 学生
  studentModel student? @relation(fields: [studentId], references: [id])
  studentId    String?  @map("student_id")
  teacherModel teacher? @relation(fields: [teacherId], references: [id])
  teacherId    String?  @map("teacher_id")
}

// 考试、论文、毕业、清考
